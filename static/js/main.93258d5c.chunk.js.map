{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","user","id","name","email","className","alt","src","CardList","users","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","this","filteredUsers","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+UAgBeA,G,MAZF,SAACC,GAAW,IAAD,EACQA,EAAMC,KAA1BC,EADY,EACZA,GAAIC,EADQ,EACRA,KAAMC,EADE,EACFA,MAElB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BL,EAA1B,4BACnB,4BAAKC,GACL,2BAAIC,MCEDI,G,MARE,SAACR,GAAD,OACb,yBAAKK,UAAU,aACVL,EAAMS,MAAMC,KAAI,SAAAT,GAAI,OACjB,kBAAC,EAAD,CAAMU,IAAKV,EAAKC,GAAID,KAAMA,UCKvBW,G,MATG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACd,2BACIT,UAAU,SACVU,KAAK,SACLF,YAAaA,EACbG,SAAUF,M,sQCoCHG,E,uNAtCX,aAAe,IAAD,8BACV,gBAcJH,aAAe,SAAAI,GACX,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACTd,MAAO,GACPW,YAAa,IALP,E,gEASO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAhB,GAAK,OAAI,EAAKU,SAAS,CAAEV,e,+BAO7B,IAAD,EAC0BmB,KAAKL,MAA5Bd,EADH,EACGA,MAAOW,EADV,EACUA,YACTS,EAAgBpB,EAAMqB,QAAO,SAAA7B,GAAI,OACnCA,EAAKE,KAAK4B,cAAcC,SAASZ,EAAYW,kBAGjD,OACI,yBAAK1B,UAAU,OACX,6CACA,kBAAC,EAAD,CACIQ,YAAY,eACZC,aAAcc,KAAKd,eAEvB,kBAAC,EAAD,CAAUL,MAAOoB,S,GAjCfI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.93258d5c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.css';\n\nconst Card = (props) => {\n    const { id, name, email } = props.user;\n\n    return (\n        <div className='card-container'>\n            <img alt='user' src={`https://robohash.org/${id}?set=set3&size=180x180`} />\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from '../card/card';\n\nimport './card-list.css';\n\nconst CardList = (props) => (\n    <div className='card-list'>\n        {props.users.map(user => (\n            <Card key={user.id} user={user} />\n        ))}\n    </div>\n);\n\nexport default CardList;","import React from 'react';\n\nimport './search-box.css';\n\nconst SearchBox = ({ placeholder, handleChange }) => (\n    <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n);\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/search-box/search-box';\n\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            users: [],\n            searchField: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response =>response.json())\n            .then(users => this.setState({ users }));\n    }\n\n    handleChange = e => {\n        this.setState({ searchField: e.target.value})\n    }\n\n    render() {\n        const { users, searchField } = this.state;\n        const filteredUsers = users.filter(user => (\n            user.name.toLowerCase().includes(searchField.toLowerCase())\n        ))\n\n        return (\n            <div className='App'>\n                <h1>Directory App</h1>\n                <SearchBox\n                    placeholder='Search Users'\n                    handleChange={this.handleChange}\n                />\n                <CardList users={filteredUsers} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}